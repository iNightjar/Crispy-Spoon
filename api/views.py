from .models import Meal, Rating
from rest_framework import viewsets, status, request, permissions
from .serializers import MealSerializer, RatingSerializer, UserSerializer
from rest_framework.decorators import action
from rest_framework.response import Response
from django.contrib.auth.models import User
from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import AllowAny, IsAuthenticated, IsAdminUser, IsAuthenticatedOrReadOnly
from rest_framework.authtoken.models import Token

from api import serializers


class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer

    # authentication classes, permission classes
    authentication_classes = (TokenAuthentication,)
    permission_classes = (AllowAny,)

    #user creation with token autogenerated
    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        token, created = Token.objects.get_or_create(user=serializer.instance)

        return Response({
            'token': token.key,
        },
            status=status.HTTP_201_CREATED)


    def list(self, request, *args, **kwargs):
        response = {'message', 'You can not create rating like that'}
        return Response(response, status=status.HTTP_400_BAD_REQUEST)


class MealViewSet(viewsets.ModelViewSet):
    queryset = Meal.objects.all()
    serializer_class = MealSerializer

    # authentication classes, permission classes
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)


    # meals and rate them inside the meals view
    @action(detail=True, methods=['POST'])
    def rate_meal(self,  request, pk=None):
        if 'stars' in request.data:
            # create or update
            meal = Meal.objects.get(id=pk)
            stars = request.data['stars']
            user = request.user
            print(user)

            # username = request.data['username']
            # user = User.objects.get(username=username)
            try:
                #update
                rating = Rating.objects.get(user=user.id, meal=meal.id) # specific rate
                rating.stars = stars
                rating.save()
                serialzer = RatingSerializer(rating, many=False)

                json = {
                    'message' : 'Meal Rate Updated',
                    'result' : serialzer.data

                }
                return Response(json, status=status.HTTP_200_OK)


            except:
                #create if the rate not exist
                rating = Rating.objects.create(stars=stars,meal=meal,user=user)
                serialzer = RatingSerializer(rating, many=False)
                json = {
                    'message': 'Meal Rate Craeted',
                    'result': serialzer.data

                }
                return Response(json, status=status.HTTP_200_OK)

        else:
            json = {
                'message': 'Stars Not Given'
            }
            return Response(json, status=status.HTTP_400_BAD_REQUEST)



class RatingViewSet(viewsets.ModelViewSet):
    queryset = Rating.objects.all()
    serializer_class = RatingSerializer

    # authentication classes, permission classes
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)

    # overwriting the built-in functions to prevent update or create with message
    def update(self, request, *args, **kwargs):
        response = {
            'message': 'Invalid way to crate or update'
        }
        return Response(response, status=status.HTTP_400_BAD_REQUEST)

    def create(self, request, *args, **kwargs):
        response = {
            'message': 'Invalid way to crate or update'
        }
        return Response(response, status=status.HTTP_400_BAD_REQUEST)
